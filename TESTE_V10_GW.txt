╔═══════════════════════════════════════════════════════════╗
║        ✅ V10.0 - DPL COM GW (Graphics Write)            ║
║           Método CORRETO e SIMPLES!                      ║
╚═══════════════════════════════════════════════════════════╝

🙏 OBRIGADO PELA DICA!
────────────────────────────────────────────────────────────
Você estava certo sobre usar o comando GW!

ANTES (V9.1):
  ICRsig → cria imagem
  1Y...  → imprime imagem
  (dois passos)

AGORA (V10):
  GW → escreve gráfico DIRETO!
  (um passo só!)


✅ IMPLEMENTAÇÃO V10:
────────────────────────────────────────────────────────────
Comandos DPL com GW:

```dpl
<STX>n                           # Reset
<STX>M1500                       # Altura
<STX>KcLW0405;                   # Calor
<STX>O0220                       # Offset
<STX>D11                         # Darkness
<STX>A2                          # Acceleration
<STX>A100,50,0,4,1,1,N,"ASSINATURA:"  # Texto
<STX>GW100,100,72,XXX,HEXDATA    # Gráfico!
Q0001                            # Quantidade
E                                # Execute
```

Formato GW:
  GW<x>,<y>,<widthBytes>,<height>,<hexdata>


💡 CONVERSÃO PARA HEX:
────────────────────────────────────────────────────────────
Bitmap → Monocromático → String Hex

Exemplo:
  Pixel preto (gray < 128) = bit 1
  Pixel branco (gray >= 128) = bit 0
  8 pixels = 1 byte
  1 byte = 2 chars hex (ex: "FF", "00", "A3")


📋 EXEMPLO DE CÓDIGO:
────────────────────────────────────────────────────────────
```kotlin
// Converte bitmap para hex
for (y in 0 until height) {
    for (xByte in 0 until widthBytes) {
        var byte = 0
        for (bit in 0..7) {
            val x = xByte * 8 + bit
            if (x < width) {
                val pixel = bitmap.getPixel(x, y)
                val gray = (R + G + B) / 3
                if (gray < 128) {
                    byte = byte or (1 shl (7 - bit))
                }
            }
        }
        hexData.append(String.format("%02X", byte))
    }
}

// Comando final
val cmd = "\u0002GW100,100,$widthBytes,$height,$hexData\r\n"
```


⚡ TESTE AGORA:
────────────────────────────────────────────────────────────
1. Instalar:
   adb install -r app/build/outputs/apk/debug/app-debug.apk

2. Abrir app → Conectar RP4

3. Desenhar SUA ASSINATURA

4. Clicar "Imprimir"


✅ DEVE FUNCIONAR PORQUE:
────────────────────────────────────────────────────────────
✓ GW é o comando CORRETO para gráficos DPL
✓ Formato hex é padrão DPL
✓ Comandos com STX nos lugares certos
✓ Um passo só (não precisa ICR + 1Y)


🎯 RESULTADO ESPERADO:
────────────────────────────────────────────────────────────
Deve imprimir:
  - Texto: "ASSINATURA:"
  - SUA ASSINATURA como imagem
  

📊 COMPARAÇÃO:
────────────────────────────────────────────────────────────
V9.1: ICR + dados binários + 1Y
      → Complicado, 2 passos

V10:  GW + dados hex
      → Simples, direto!


💪 VANTAGENS DO GW:
────────────────────────────────────────────────────────────
✓ Mais simples
✓ Menos comandos
✓ Formato hex é legível (debug fácil)
✓ Padrão DPL documentado
✓ Funciona em todas impressoras DPL


⚡ TESTE E ME CONTE! 🚀

Obrigado pela dica do GW!
Muito mais simples e correto! 👍

